#ifndef $INSERT_NAME$_h
#define $INSERT_NAME$_h

$INSERT_DEFINES$

typedef struct {
    double z[NN*nm]; // Optimal z
    double lambda[NN*nn]; // Optimal lambda
    double update_time;
    double solve_time;
    double polish_time;
    double run_time;
} sol_laxMPC_FISTA;

#ifdef CONF_MATLAB

#if time_varying == 0
void laxMPC_FISTA(double *pointer_x0, double *pointer_xr, double *pointer_ur, double *u_opt, double *pointer_k, double *e_flag, double *z_opt, double *lambda_opt, double *update_time, double *solve_time, double *polish_time, double *run_time);
#else
void laxMPC_FISTA(double *pointer_x0, double *pointer_xr, double *pointer_ur, double *pointer_A, double *pointer_B, double *pointer_Q, double *pointer_R, double *u_opt, double *pointer_k, double *e_flag, double *z_opt, double *lambda_opt, double *update_time, double *solve_time, double *polish_time, double *run_time);
#endif

#else

#if time_varying == 0
void laxMPC_FISTA(double *pointer_x0, double *pointer_xr, double *pointer_ur, double *u_opt, int *pointer_k, int *e_flag, sol_laxMPC_FISTA *sol);
#else
void laxMPC_FISTA(double *pointer_x0, double *pointer_xr, double *pointer_ur, double *pointer_A, double *pointer_B, double *pointer_Q, double *pointer_R, double *u_opt, int *pointer_k, int *e_flag, sol_laxMPC_FISTA *sol);
#endif

#endif

void compute_z_lambda_laxMPC_FISTA(double *z_0, double z[][nm], double *z_N, double lambda[][nn], double *q, double *qp);

void compute_residual_vector_laxMPC_FISTA(double res_vec[][nn], double *z_0, double z[][nm], double *z_N, double *b);

void solve_W_matrix_form(double mu[][nn]);

#endif

// This code is generated by the Spcies toolbox: https://github.com/GepocUS/Spcies

